Το SemaphoresBar αποτελεί ένα πρόγραμμα που εκμεταλλεύεται τους semaphores καθώς και το shared memory του λειτουργικού συστήματος για να δημιουργήσει μια προσομοίωση από ένα μπαρ στο οποίο εξυπηρετούνται πελάτες. 

Το πρόγραμμα αρχικοποιεί την shared memory, καθώς και τους semaphores που θα χρησιμοποιηθούν μέσω του shared_mem_init.
Στη συνέχεια εκτελείται το receptionist μέχρι το μπαρ να φτάσει τον μέγιστο αρθμό επισκεπτών. Αυτός ορίζεται μαζί με άλλα 
δεδομένα στο shared_mem_init.h. Ο receptionist περιμένει τους επισκέπτες να φτάσουν στο μπαρ και έναν έναν τους εξυπηρετεί 
για [ordertime*0.5, ordertime] δευτερόλεπτα (sleep). Aν το μπαρ είναι γεμάτο ο receptionist περιμένει στο semaphore full, 
μέχρι να αδειάσει κάποιο τραπέζι.

Για να εκτελεστούν με μια εντολή τα δύο προγράμματα χρησιμοποιείται η make run και το ordertime επεξεργάζεται μέσω του
makefile. Για να αλλάξει το όνομα της shared memory πρέπει να γίνει αλλαγή και στο makefile και στο shared_mem_init.h.

Όσο εκτελείται το receptionist επισκέπτες μέσω του visitor καταφθάνουν στο μπαρ. Ο κάθε visitor περιμένει αρχικά στο semaphore 
visit μέχρι να ανοίξει από τον receptionist. Στη συνέχεια περιμένει σε έναν buffer από semaphores και συγκεκριμένα στον semaphore
της θέσης start index του buffer. Κάθε φορά που γίνεται μια παραγγελία το start index αυξάνεται κατά ένα για να περιμένει ο επόμενος 
πελάτης στην επόμενη θέση. Έτσι ο receptionist εξυπηρετεί τους visitors με τη σειρά που θα φτάσουν στο μπαρ. Το start index όταν
φτάσει το μέγεθος του buffer ξαναγυρνάει στο 0. Το μέγεθος αυτό και κατ΄ επέκταση ο αριθμός των semaphores μέσα στο buffer 
αρχικοποιείται επίσης στο shared_mem_init.h. Όταν έρθει η σειρά του, ο visitor ψάχνει για ελέυθερη θέση και μόλις βρει
διαλέγει την παραγγελία του και περιμένει τον receptionist να την εκτελέσει (sleep). Μόλις διαλέξει την παραγγελία του ενημερώνεται και
το shared memory για να ανανεωθούν τα στατιστικά. Όταν είναι έτοιμη την παραλαμβάνει και περιμένει στο μπαρ για [resttime*0.7, resttime] 
δευτερόλεπτα. Το resttime ορίζεται στο shared_mem_init.h ή/και σαν inline parameter του visitor. Μόλις τελειώσει ενημερώνει το shared memory
το χρόνο που περίμενε και το χρόνο που έκατσε στο τραπέζι και καταγράφει στο logging.txt την ακριβή ώρα που έφτασε, που έκατσε και που έφυγε
(σε GMT+2), καθώς και το τραπέζι-καρέκλα που έκατσε. Αν ο αριθμός των επισκεπτών έφτασε στο μέγιστο ορισμένο από το shared_mem_init.h, τότε 
ανοίγει το semaphore end και ο receptionist τελειώνει τη δουλειά του και εκτωπώνει στο tty όλα τα στατιστικά. Τέλος καθαρίζει το shared memory
και όλα τα semaphores που έχουν χρησιμοποιηθεί.

Το κάθε τραπέζι είναι ένα struct που ορίζεται στο table.h μαζί με όλες τις πληροφορίες του.

Κατά την εκτέλεση του προγράμματος και οποιαδήποτε στιγμή που αυτό τρέχει, μπορεί να εκτελέστεί το πρόγραμμα monitor, το οποίο κάνει προσπέλαση
στη shared memory και εκτυπώνει στο tty την κατάσταση σε όλα τα τραπέζια και τα στατιστικά μέχρι εκείνη τη στιγμή. 

Το mutual exclusion επιτυγχάνεται μέσω ενός named semaphore, το όνομα του οποίου ορίζεται στο shared_mem_init.h.

Το struct του shared memory βρίσκεται επίσης στο shared_mem_init.h.

To memory.c όταν εκτελεστεί καθαρίζει την shared memory (αν για κάποιο λόγο δεν έχει τερματίσει σωστά το receptionist)

#---------------------------------------------------------------ΕΚΤΕΛΕΣΗ---------------------------------------------------------------------

make run (εκτελεί 	./shared_mem_init -s sdi2200169
	                ./receptionist -d 2 -s sdi2200169 )
Η παράμετρος μετά το -d (ordertime) μπορεί να επεξεργαστεί σε οποιονδήποτε αριθμό μέσα στο makefile.

SPLIT TERMINAL:

make example (εκτελεί ./shared_mem_init 0 1 ) 
Όταν το shared_mem_init εκτελεστεί με παραμέτους 0 και anything δημιουργεί μέσω fork και exec τον μέγιστο αριθμό επισκεπτών που έχει οριστεί στο shared_mem_init.h.
Το exec εκτελεί execlp("./visitor", "visitor", "-d", REST_TIME, "-s", SHMID, NULL);

To REST_TIME και το SHMID ορίζονται στο shared_mem_init.h.
Αν θέλουμε να αλλάξουμε το SHMID (όνομα κοινής μνήμης) πρέπει να το αλλάξουμε και στο makefile ή στην παράμετρο της εκτέλεσης του κάθε προγράμματος.

SPLIT TERMINAL:

make monit (εκτελεί ./monitor -s sdi2200169) 
Για monitoring της κατάστασης στο μπαρ.

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
make clean μετά από κάθε αλλαγή στο shared_mem_init.h.
